#+OPTIONS: date:nil reveal_mathjax:t toc:nil num:nil
#+OPTIONS: tex t
#+OPTIONS: timestamp:nil
#+PROPERTY: tangle Aula08.hs
#+PROPERTY: :header-args:haskell: :prologue ":{\n" :epilogue ":}\n"
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js

#+Title: Classes de tipos
#+Author:  Programação Funcional

* Objetivos

** Objetivos

- Apresentar o conceito de classes de tipos.
- Apresentar os conceitos de polimorfismo paramétrico e de sobrecarga.

** Setup

#+begin_src haskell :tangle yes :exports code :results output
{-# LANGUAGE InstanceSigs #-}
module Aula08 where
#+end_src

* Anteriormente...

** Anteriormente...

- Polimorfismo paramétrico: funções funcionam de maneira uniforme para todos os tipos.

#+begin_src haskell
reverse :: [a] -> [a]
 fst :: (a,b) -> a
#+end_src

** Anteriormente...

- Sobrecarga: funções que operam de forma diferente sobre diferentes tipos.
  - Não são definidas para todos os tipos.
- Exemplos:

#+begin_src haskell
elem :: Eq a => a -> [a] -> Bool
(+)  :: Num a => a -> a -> a
#+end_src

* Classes de tipos

** Classes de tipos

- Nome inicia com letra maiúscula.
- Define uma variável de tipo que representa o tipo a ser sobrecarregado.
- Cada classe define um ou mais funções que devem ser implementadas por suas instâncias.

** Exemplo

#+begin_src haskell
class Eq a where
   (==) :: a -> a -> Bool
   (/=) :: a -> a -> Bool
#+end_src

** Instâncias

- Similares a declaração de classes.

- Variáveis são substituída por tipos concretos.

- Assinaturas de tipos devem ser substituídas por implementações das funções para o tipo em questão.

** Exemplo

#+begin_src haskell
instance Eq Bool where
   True  == True  = True
   False == False = True
   _     == _     = False

   x /= y = not (x == y)
#+end_src

** Exemplo

#+begin_src haskell :tangle yes :exports code :results output
data Point = Point Int Int

instance Eq Point where
   (Point x y) == (Point x' y') =
      x == x' && y == y'
   x /= y = not (x == y)
#+end_src

** Exemplo

- Só podemos usar uma função sobrecarregada se essa possuir implementação para um certo tipo.

#+begin_src haskell :tangle yes :exports code :results output
data Vec3 = Vec3 Int Int Int
#+end_src

#+begin_src haskell
Prelude*> (Vec3 0 1 1) == (Vec3 0 1 1)
No instance for (Eq Vec3)
#+end_src

** Assinaturas em instâncias

- Por padrão, não podemos anotar tipos em instâncias.

- A extensão ~InstanceSigs~ habilita essa possibilidade.

** Exemplo

#+begin_src haskell :tangle yes :exports code :results output
data BoolPair = BoolPair Bool Bool

instance Eq BoolPair where
   (==) :: BoolPair -> BoolPair -> Bool
   (BoolPair b1 b2) == (BoolPair b1' b2')
      = b1 == b1' && b2 == b2'
   (/=) :: BoolPair -> BoolPair -> Bool
   b1 /= b2 = not (b1 == b2)
#+end_src

** Instâncias recursivas

- Instâncias sobre tipos polimórficos podem depender da existência de instâncias sobre seus parâmetros.

** Exemplo

#+begin_src haskell
instance Eq a => Eq [a] where
   []       == []         = True
   (x : xs) == (y : ys)   = x == y && xs == ys
   _        == _          = False

   xs /= ys = not (xs == ys)
#+end_src


** Superclasses

- Classes podem exigir que todas suas instâncias possuam instâncias de outras classes.

- Nesse caso, dizemos que a primeira é uma subclasse da segunda. Ex: Ord é subclasse de Eq.

#+begin_src haskell
class Eq a => Ord a where
  (<), (>), (>=), (<=) :: a -> a -> Bool
  max, min :: a -> a -> a
#+end_src

** Significado de ~=>~

- Em um tipo, restringe um tipo polimórfico.

#+begin_src haskell
elem :: Eq a => a -> [a] -> Bool
#+end_src

- Tipo ~a~ deve ser uma instância de ~Eq~.


** Significado de ~=>~

- Em classes, define uma relação de subclasses.

#+begin_src haskell
class Eq a => Ord a where
#+end_src

- Todo tipo instância de ~Ord~ deve possuir uma instância de ~Eq~

** Significado de ~=>~

- Em uma instância, define um requisito para a instância definida.

#+begin_src haskell
instance Eq a => Eq [a] where
#+end_src

- Especifica que para usar a igualdade sobre listas, devemos possuir a igualdade sobre elementos.

** Definições ~default~

- Diversas instâncias de ~Eq~ possuem a mesma implementação de ~(/=)~:

#+begin_src haskell
x /= y = not (x == y)
#+end_src

- Tais definições padrão podem ser incluídas na declaração da classe.

** Exemplo

#+begin_src haskell
class Eq a where
   (==) :: a -> a -> Bool
   (/=) :: a -> a -> Bool

   x /= y = not (x == y)
   x == y = not (x /= y)
#+end_src

** Derivação automática

- O compilador de Haskell é capaz de produzir, automaticamente, definições de algumas funções sobrecarregadas.

- Exemplos: Eq, Ord, Show, Enum, etc...

** Derivação automática

- A declaração seguinte gera implementações padrão de instâncias de Eq, Ord e Show para o tipo Point2D:

#+begin_src haskell :tangle yes :exports code :results output
data Point2D
   = Point2D Int Int
     deriving (Eq, Ord, Show)
#+end_src

** Definindo uma classe

- Operação para realizar scaling de formas e vetores.

#+begin_src haskell :tangle yes :exports code :results output
data Vector
   = Vector Float Float
     deriving (Eq, Ord, Show)

data Shape
   = Rectangle Vector Float Float
   | Circle Vector Float
   deriving (Eq, Ord, Show)
#+end_src


** Definindo uma classe

- Operação para realizar scaling de formas e vetores.

#+begin_src haskell :tangle yes :exports code :results output
class Scale a where
   scale :: Float -> a -> a
#+end_src

** Definindo instâncias

- Instância para Vector.

#+begin_src haskell :tangle yes :exports code :results output
instance Scale Vector where
   scale s v@(Vector x y)
      = Vector (x * s') (y * s')
        where
         s' = s / norm v
         norm (Vector a b) = sqrt (a^2 + b^2)
#+end_src


** Definindo instâncias

- Instâncias para Shape.

#+begin_src haskell :tangle yes :exports code :results output
instance Scale Shape where
   scale s (Circle p r)      = Circle p (s * r)
   scale s (Rectangle p w h) = Rectangle p (s * w) (s * h)
#+end_src

** Funções sobre Scalable

- Podemos definir código que funciona para qualquer tipo Scalable.

#+begin_src haskell :tangle yes :exports code :results output
double :: Scale a => a -> a
double s = scale 2.0 s
#+end_src

** Mais instâncias

- Podemos definir instâncias sobre coleções.

#+begin_src haskell :tangle yes :exports code :results output
instance Scale a => Scale [a] where
   scale s = map (scale s)
#+end_src

** Tipos númericos

- Constantes numéricas são sobrecarregadas.

#+begin_src haskell
Prelude*>:t 3
3 :: Num a => a
#+end_src

** Tipos numéricos

- Como 3 é sobrecarregado, podemos usá-lo como qualquer tipo instância de Num:

#+begin_src haskell
Prelude*> :t 3 :: Int
3 :: Int

Prelude*> :t 3 :: Float
3 :: Float

Prelude*> :t 3 :: Rational
3 % 1 :: Rational
#+end_src

** Tipos Numéricos

- Definidos pela classe Num:

#+begin_src haskell
class Num a where
   fromInteger :: Integer -> a
   (+), (*), (-) :: a -> a -> a
   abs, signum :: a -> a
#+end_src

** Tipos Numéricos

- Sobrecarga de valores numéricos é feita pela função ~fromInteger~.

- Isto é, 3 :: Int é, na verdade, fromInteger 3.

- Isso permite a sobrecarga de valores quaisquer como números e expressões numéricas.

** Exemplo

- Expressões aritméticas

#+begin_src haskell :tangle yes :exports code :results output
data Exp
  = Const Int
  | Exp :+: Exp
  | Exp :-: Exp
  | Exp :*: Exp
  | Abs Exp
  | Sign Exp
  deriving (Eq, Ord, Show)
#+end_src

** Exemplo

#+begin_src haskell :tangle yes :exports code :results output
ex :: Exp
ex = Const 1 :+: Const 1
#+end_src

** Exemplo

- instância de ~Num~:

#+begin_src haskell :tangle yes :exports code :results output
instance Num Exp where
  fromInteger = Const . fromInteger
  (+) = (:+:)
  (-) = (:-:)
  (*) = (:*:)
  abs = Abs
  signum = Sign
#+end_src

** Exemplo

- Podemos usar a instância de ~Num~ para escrever expressões usando operadores de Haskell.

#+begin_src haskell :tangle yes :exports code :results output
ex1 :: Exp
ex1 = 1 + 1
#+end_src

#+begin_src haskell
*Aula10> ex1
Const 1 :+: Const 1
#+end_src

** Intervalos

- Sintaxe de intervalos usada em listas é, na verdade, uma operação sobrecarregada.

- A lista ~[n..m]~ é uma abreviação para ~enumFromTo n m~.

#+begin_src haskell
enumFromTo :: Enum a => a -> a -> [a]
#+end_src

Essa função é definida na classe ~Enum~

** Intervalos

#+begin_src haskell
enumFrom :: Enum a => a -> [a]
#+end_src

- A função ~enumFrom~ produz uma lista sem especificar um
limite superior, logo o resultado pode ser uma lista infinita.

#+begin_src haskell
Prelude*> take 5 [0..]
[0,1,2,3,4]
#+end_src

** Intervalos

#+begin_src haskell
enumFromThenTo :: Enum a => a -> a -> a -> [a]
#+end_src

- A função ~enumFromThenTo~ produz uma lista em que cada elemento adjacente possui a mesma "distância".

#+begin_src haskell
[1.0, 1.2 .. 2.0]
[1.0,1.2,1.4,1.5999999999999999,1.7999999999999998,1.9999999999999998]
#+end_src

** Derivação automática

- Instâncias de Enum podem ser calculadas automaticamente para enumerações.

#+begin_src haskell :tangle yes :exports code :results output
data Direction
   = North | South | East | West
     deriving (Eq, Ord, Show, Enum)
#+end_src


* Exercícios

** Exercícios

- Implemente uma instância de Eq para o tipo ~Vec3~.

- Implemente uma instância de Eq para o tipo ~Person~ que considere duas pessoas iguais se essas possuírem o mesmo nome.

#+begin_src haskell :tangle yes :exports code :results output
data Person
  = Person {
      name :: String
    , age  :: Int
    }
#+end_src

** Exercícios

- Implemente uma instância de Show para ~Person~ de forma que o resultado da conversão para string de um valor de tipo ~Person~ exiba apenas o campo name deste registro.

