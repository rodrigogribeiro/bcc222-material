#+OPTIONS: date:nil reveal_mathjax:t toc:nil num:nil
#+OPTIONS: tex t
#+OPTIONS: timestamp:nil
#+PROPERTY: tangle Aula14.hs
#+PROPERTY: :header-args:haskell: :prologue ":{\n" :epilogue ":}\n"
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:///users/rodrigo/reveal.js

#+Title: Estudo de caso: Lenses.
#+Author:  Programação Funcional

* Objetivos

** Objetivos

- Apresentar o conceito de lenses e seu uso para manipulação de dados.

** Setup

#+begin_src haskell :exports code :tangle yes :result output
module Aula14 where
#+end_src

* Registros

** Registros

- Registros são uma forma útil de estruturar informação.

- Modificar registros é algo tedioso.

** Registros

- Exemplo de registro:

#+begin_src haskell :tangle yes :exports code :result output
data Point
  = Point {
      x :: Int
    , y :: Int
    }
#+end_src

** Registros

- Campos definem funções de projeção:

#+begin_src haskell
x :: Point -> Int
y :: Point -> Int
#+end_src

** Registros

- Atualização de registros

#+begin_src haskell :tangle yes :exports code :results output
setX :: Int -> Point -> Point
setX x' p = p {x = x'}
#+end_src

- Sintaxe permite modificar apenas um certo campo.

- Ok, se a estrutura for pequena...

** Registros

- Representando endereços

#+begin_src haskell :tangle yes :exports code :results output
data Address
  = Address {
      _street :: String
    , _city :: String
    , _cep  :: String
    } deriving Show
#+end_src

** Registros

- Representando pessoas.

#+begin_src haskell :tangle yes :exports code :results output
data Person
  = Person {
      _name :: String
    , _age :: Int
    , _address :: Address
    } deriving Show
#+end_src

** Registros

- Como alterar a rua do endereço de uma pessoa?

#+begin_src haskell :tangle yes :exports code :results output
setStreet :: String -> Person -> Person
setStreet st p
   = p{_address
        = (_address p){_street = s}}
#+end_src

** Registros

- Função setStreet faz a atualização de endereço

#+begin_src haskell
(_address p){_street = s}
#+end_src

e depois da pessoa

#+begin_src haskell
p {_address = ...}
#+end_src

** Registros


- Em linguagens OO isso seria resolvido facilmente usando funções set/get
  - Brainless code gerado por IDEs

- Haskell não possui suporte a esse tipo de código?

** Registros

- Lenses: get/set technology para Haskell

- Construído usando conceitos de applicative functors


* Implementação 1

** Implementação 1

- Lens é um registro formado por uma função view e set

#+begin_src haskell :tangle haskell :exports code :results output
data Lens s a
  = Lens {
      _view :: s -> a      -- get
    , _set  :: a -> s -> s -- set
    }
#+end_src

** Implementação 1

- Registro contendo um par de funções.

- _view :: s -> a: obter valor de tipo a em uma estrutura de tipo s

- _set :: a -> s -> s: atualizar valor de tipo a na estrutura de tipo s.

** Implementação 1

- Lens para o campo _name do tipo Person.

#+begin_src haskell :tangle yes :exports code
name1 :: Lens Person String
name1
  = Lens _name setName
    where
      setName s p = p{_name = s}
#+end_src

** Implementação 1

- Lens para o campo _address do tipo Person.

#+begin_src haskell :tangle yes :exports code :results output
address :: Lens Person Address
address = Lens _address setAddress
  where
    setAddress a p = p{_address = a}
#+end_src

* Lenses

** Lenses

- Até aí, apenas um tipo para representar get/set.

- Qual a vantagem de se usar lenses?
  - Lenses são composicionais!

** Lenses

- Composição

#+begin_src haskell :tangle yes :exports code :result output
(@@) :: Lens s s1 -> Lens s1 a -> Lens s a
(Lens v1 u1) @@ (Lens v2 u2)
  = Lens (v2 . v1)
         (\ a s -> u1 (u2 a (v1 s)) s)
#+end_src

- Tipos usados:

#+begin_src haskell
u1 :: s1 -> s -> s
v1 :: s -> s1
u2 :: a  -> s1 -> s1
v2 :: s1 -> a
#+end_src

** Lenses

#+attr_html:650px
[[./lens-composition.png]]

** Lenses

- Exemplos

#+begin_src haskell :tangle yes :exports code :results output
streetOf :: Person -> String
streetOf = _view (address @@ street)

setStreet :: String -> Person -> Person
setStreet s = _set (address @@ street)
#+end_src

** Lenses

- Atualizar a rua para "Rua 6".

#+begin_src haskell :exports code :tangle yes :results output
pex :: Person
pex = Person "João" 30 addex

addex :: Address
addex = Address "Rua A" "São Pedro" "123"
#+end_src

** Lenses

- Exemplo

#+begin_src haskell
*Prelude> setStreet "Rua 6" pex
Person
  {_name = "João"
  , _age = 30
  , _address
    = Address
      {_street = "Rua 6"
      , _city = "São Pedro"
      , _cep = "123"}}
#+end_src

** Lenses

- Lenses são aplicáveis somente a registros?

** Lenses

- Não! Lenses são um padrão que permite modificar estruturas quaisquer de forma composicional.

** Lenses

- Lens para listas

#+begin_src haskell
setIdx :: Int -> a -> [a] -> [a]
setIdx _ _ [] = error "index too large"
setIdx i v (x : xs)
  | i < 0    = error "negative index"
  | otherwise = if i == 0
                then v : xs
                else x : setIdx (i - 1) v xs
#+end_src

** Lenses

#+begin_src haskell
ix :: Int -> Lens [a] a
ix i = Lens (!! i) (setIdx i)
#+end_src

** Lenses

- Incrementar um elemento de uma lista?
   - Vamos generalizar para aplicar uma função sobre elementos da lista.

#+begin_src haskell
atPos :: (a -> a) -> Int -> [a] -> [a]
atPos f i xs
  = let
      v  = _view (ix i) xs
      v' = f v
    in _set (ix i) v' xs
#+end_src

** Lenses

- Veja que a implementação anterior percorre a lista duas vezes.
    - Uma vez para encontrar o elemento.
    - Outra vez para atualizar a lista original.
- Ineficiente...

** Lenses

- Adicionar uma função para modificar um campo.

#+begin_src haskell
data LensR s a
  = LensR {
      _viewR   :: s -> a
    , _setR    :: a -> s -> s
    , _modifyR :: (a -> a) -> s -> s
    }
#+end_src

** Solução?

- O tipo de `_modifyR` define funções de modificação que nunca "falham".

#+begin_src haskell
_modifyR :: (a -> a) -> s -> s
#+end_src

- E se quisermos dividir um campo numérico por um valor?

** Solução?

- Podemos adicionar outro campo...

#+begin_src haskell
data LensR s a
  = LensR {
      _viewR   :: s -> a
    , _setR    :: a -> s -> s
    , _modifyR :: (a -> a) -> s -> s
    , _modifyM :: (a -> Maybe a) -> s -> Maybe s
    }
#+end_src

** Solução?

- E se precisarmos aplicar uma função sobre dados recebidos via rede?
    - Mais um campo sobre a mônada de I/O...

#+begin_src haskell
data LensR s a
  = LensR {
      _viewR   :: s -> a
    , _setR    :: a -> s -> s
    , _modifyR :: (a -> a) -> s -> s
    , _modifyM :: (a -> Maybe a) -> s -> Maybe s
    , _modifyIO :: (a -> IO a) -> s -> IO s
    }
#+end_src

** Solução?

- Essa repetição excessiva de campos não é um bom sinal.

- Vamos observar os tipos dos campos incluídos:

#+begin_src haskell
_modifyR  :: (a -> a) -> s -> s
_modifyM  :: (a -> Maybe a) -> s -> Maybe s
_modifyIO :: (a -> IO a) -> s -> IO s
#+end_src

** Padrão?

- Vamos nos concentrar nos dois últimos:

#+begin_src haskell
_modifyM  :: (a -> Maybe a) -> s -> Maybe s
_modifyIO :: (a -> IO    a) -> s -> IO    s
#+end_src

- Padrão? Sim, tanto Maybe quanto IO são functores!

** Padrão?

- Generalizando modify:

#+begin_src haskell
modifyF :: Functor f => (a -> f a) -> s -> f s
#+end_src

- Porém, isso é tão geral que podemos representar um Lens usando apenas essa função.

* Implementação 2

** Implementação 2

- Uma nova definição de Lens.

#+begin_src haskell
{-# LANGUAGE RankNTypes #-}

type Lens s a = Functor f => (a -> f a) -> s -> f s
#+end_src

- Como assim???
    - Veremos que essa definição de Lens é equivalente à definição da primeira implementação.

** Definindo set

- Como definir a função `set`?

#+begin_src haskell
type Lens s a = Functor f => (a -> f a) -> s -> f s

set :: Lens s a -> a -> s -> s
set ln a s = _
#+end_src

- Como obter um valor `s` se o retorno de `ln` é
  `(f s)`?

** Definindo set

- Escolhendo um f:
   - Deve ser possível obter s a partir de f s.
   - Restrição: deve ser uma instância de Functor.

** Definindo `set`

- Solução: Identity Functor

#+begin_src haskell
newtype Identity a = Identity a


runIdentity :: Identity a -> a
runIdentity (Identity v) = v


instance Functor Identity where
  fmap f (Identity v)
    = Identity (f v)
#+end_src

** Definindo set

#+begin_src haskell
set :: Lens s a -> a -> s -> s
set ln v s
    = runIdentity (ln set_fld s)
  where
    set_fld _ = Identity v
#+end_src

** Definindo over

- Aplicando uma função
    - Desta vez, a alteração é feita localmente.
    - Eficiente, não há "get depois set"

#+begin_src haskell
over :: Lens s a -> (a -> a) -> s -> s
over ln f s
  = runIdentity (ln (Identity . f) s)
#+end_src

** Definindo view

- Problema: Como obter a a partir de (f s)?
   - Novamente, vamos escolher um f apropriado.

#+begin_src haskell
type Lens s a = Functor f => (a -> f a) -> s -> f s

view :: Lens s a -> s -> a
view ln s = _
#+end_src

** Constant Functor

#+begin_src haskell
newtype Const a b = Const a

getConst :: Const a b -> a
getConst (Const v) = v

instance Functor (Const a) where
  fmap _ (Const v) = Const v
#+end_src

** Definindo view

#+begin_src haskell
view :: Lens s a -> s -> a
view ln s
  = getConst (ln Const s)
#+end_src

** Equivalência

- Usando as definições anteriores, podemos mostrar a equivalência entre as implementações.

#+begin_src haskell
lens2lensD :: Lens s a -> D.Lens s a
lens2lensD ln
  = D.Lens (view ln)
           (set ln)
#+end_src

** Equivalência

- Definição auxiliar: Criar um lens a partir de funções get/set

#+begin_src haskell
lens :: (s -> a) -> (a -> s -> s) -> Lens s a
lens vw st trans s
  = flip st s <$> trans (vw s)

vw :: s -> a              flip st :: (s -> a -> s)
st :: a -> s -> s         flip st s :: (a -> s)
trans :: a -> f a         trans (vw s) :: f a
vw s :: a                 flip st s <$> trans (vw s) :: f s
#+end_src

** Equivalência

- Usando lens, a segunda parte da equivalência é imediata.

#+begin_src haskell
lensD2lens :: D.Lens s a -> Lens s a
lensD2lens (D.Lens vw st)
  = lens vw st
#+end_Src

** Exemplo

- Lens para o campo _name do tipo Person

#+begin_src haskell
name :: Lens Person String
name
  = lens _name setName
    where
      setName n (Person _ ag ad)
        = Person n ag ad
#+end_src


** Exemplo

#+begin_src haskell
data Employee
  = Employee {
       _name   :: String
    ,  _salary :: Int
    }

name :: Lens Employee String
name fs (Employee n s)
  = (\ n' -> Employee n' s) <$> (fs n)

joe :: Employee
joe = Employee "Joe" 100
#+end_src

** View

#+begin_src haskell
view name (Employee "Joe" 100) ==>
-- substituindo view
getConst (name Const (Employee "Joe" 100)) ==>
-- substituindo name
getConst (fmap (\ n' -> Employee n' 100) (Const "Joe")) ==>
-- fmap f (Const v) = v
getConst (Const "Joe") ==>
-- getConst (Const v) = v
"Joe"
#+end_src

** Composição

- Composição de lenses tem o tipo:

#+begin_src haskell
Lens s s1 -> Lens s1 a -> Lens s a
   ln1         ln2
#+end_src

- que expandido resulta em

#+begin_src haskell
ln1 :: (s1 -> f s1) -> s  -> f s
ln2 :: (a  -> f a ) -> s1 -> f s1
#+end_src

** Composição

- Logo, o tipo de `ln1 . ln2` é:

#+begin_src haskell
(a -> f a) -> s -> f s
#+end_src

que é exatamente `Lens s a`.

- Composição de lenses é composição de funções.

** Operadores

- Notação para view and set.

#+begin_src haskell
(^.) :: s -> Lens s a -> a
s ^. ln = view ln s

(~.) :: Lens s a -> a -> s -> s
(~.) = set
#+end_src

** Exemplos

- Retornando aos dados de exemplo

#+begin_src haskell
pex :: Person
pex = Person "João" 30 addex

addex :: Address
addex = Address "Rua A" "São Pedro" "123"
#+end_src

** Exemplos

#+begin_src haskell
Person> pex ^. (address . street)
"Rua A"
Person> (pex & name ~. "Carlos") ^. name
"Carlos"

Person> let street' = address . street
Person> (pex & street' ~. "Baker Street") ^. street'
"Baker Street"
#+end_src

** Aplicações

- "Campos virtuais"
    - Campo Farenheint pode ser atualizado,
      consultado sem existir!

#+begin_src haskell
data Temp = Temp { _celsius :: Float } deriving Show

celsius :: Lens Temp Float
celsius = ...

farenheint :: Lens Temp Float
farenheint f (Temp c)
  = (\ fa -> Temp (ftc fa)) <$> (f (ctf c))

-- ftc, ctf :: Float -> Float
#+end_src

** Aplicações

- Manter invariantes.
  - Modificar valores de horas.

#+begin_src haskell
data Time
  = Time {
      _hours :: Int
    , _mins :: Int
    } deriving Show

now :: Time
now = Time 3 58
#+end_src

** Aplicações

- Manter invariantes

#+begin_src haskell
mins :: Lens Time Int
mins f (Time h m)
  = wrap <$> (f m)
  where
    wrap :: Int -> Time
    wrap m'
      | m' >= 60  = Time (h + 1) (m' - 60)
      | m' < 0    = Time (h - 1) (m' + 60)
      | otherwise = Time h m'
#+end_src

** Aplicações

- Manter invariantes

#+begin_src haskell
Prelude> over (+ 4) now
Time 4 2
#+end_src

** Problema

- Como converter a rua e cidade do endereço de uma pessoa para letras minúsculas?

** Problema

- Usando nossa solução atual, temos que realizar duas atualizações.

- Como fazer em um único passo?

** Solução

- Applicative Lenses!
    - Permite "focar" em múltiplos valores de uma estrutura.
- Definição:

#+begin_src haskell
type ALens s a
  = forall f. Applicative f => (a -> f a) -> s -> f s
#+end_src

** Set

- A definição de set para `Lens` funciona para `ALens`!
   - Identity como instância de Applicative.

#+begin_src haskell
instance Applicative Identity where
  pure = Identity
  (Identity f) <*> (Identity v)
    = Identity (f v)

set :: ALens s a -> a -> s -> s
set ln a s
  = runIdentity (ln set_fld s)
  where
    set_fld _ = Identity a
#+end_src

** view?

- A implementação de view é a mesma?
    - Não! Como combinar vários valores?
    - Lembre-se o functor de view é Const!
** view?

- Solução: Monoids!

#+begin_src haskell
class Monoid a where
  mempty  :: a
  mappend :: a -> a -> a
#+end_src

** view?

- Para criar a instância de Applicative para `Const v a` devemos exigir que `a` seja instância de `Monoid`

#+begin_src haskell
instance Monoid a => Applicative (Const a) where
  pure _ = Const mempty
  (Const f) <*> (Const v) = Const (f `mappend` v)
#+end_src

** view?

- Implementação de `view`

#+begin_src haskell
view :: Monoid a => ALens s a -> s -> a
view ln s
  = getConst (ln Const s)
#+end_src

** Exemplo

- Applicative lenses para endereços

#+begin_src haskell
address :: ALens Person Address
address f (Person n a ad)
  = (\ ad' -> Person n a ad') <$> f ad

streetCity :: ALens Address String
streetCity f (Address st ct cp)
  = (\ st' ct' -> Address st' ct' cp) <$>
        f st <*> f ct
#+end_src

** Exemplo

- Modificando endereço para letras minúsculas.

#+begin_src haskell
Prelude> over (address . streetCity) (map toLower) pex
Person {
  _name = "João"
, _age = 30
, _address
   = Address
      { _street = "rua a",
        _city = "nova iorque",
        _cep = "123"}}
#+end_src

** Finalizando

- Lenses é um tópico vastíssimo!
   - Implementações apresentadas são super
     "simples".
   - Várias bibliotecas Haskell e em outras linguagens:
     Scala, Elm, Kotlin, Typescript, Rust, etc...

** Finalizando

- Composição: essência do desenvolvimento de software.
   - Pequenas abstrações e formas de combiná-las.

- Functores aplicativos são uma forma elegante de
  implementar software composicional.

** Exercício

- Crie lenses para os demais campos dos tipos `Person` e `Address`.
