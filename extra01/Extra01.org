#+OPTIONS: date:nil reveal_mathjax:t toc:nil num:nil
#+OPTIONS: tex t
#+OPTIONS: timestamp:nil
#+PROPERTY: tangle Extra01.hs
#+PROPERTY: :header-args:haskell: :prologue ":{\n" :epilogue ":}\n"
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:///users/rodrigo/reveal.js

#+Title: Cifra de César e Serialização
#+Author:  Programação Funcional


* Objetivos

** Objetivos

- Utilizar funções de ordem superior sobre listas para implementação de dois algoritmos:
  - Criptografia usando a cifra de César
  - Serialização de dados

** Setup

#+begin_src haskell :tangle yes :exports code :results output
module Extra01 where

import Data.Char (chr, ord, isLower)
#+end_src

* Cifra de César

** Cifra de César

- Algoritmo simples para criptografia de textos

- Consiste em deslocar caracteres em /n/ posições.

- Exemplo: ~encode 2 "abc" == "cde"~.

** Cifra de César

- Primeiro passo: descobrir a posição de um caractere no alfabeto.

#+begin_src haskell :tangle yes :exports code :results output
char2Int :: Char -> Int
char2Int c = ord c - ord 'a'
#+end_src

** Cifra de César

- Descobrindo a posição de uma letra no alfabeto.

#+begin_src haskell :tangle yes :exports code :results output
int2Char :: Int -> Char
int2Char n = chr (ord 'a' + n)
#+end_src

** Cifra de César

- Realizando o deslocamento em /n/ posições.

#+begin_src haskell :tangle yes :exports code :results output
shift :: Int -> Char -> Char
shift n c
  | isLower c = int2Char ((char2Int c + n) `mod` 26)
  | otherwise = c
#+end_src

** Cifra de César

- Criptogrando uma string

#+begin_src haskell :tangle yes :exports code :results output
encrypt :: Int -> String -> String
encrypt n = map (shift n)
#+end_src

** Cifra de César

- Como descriptografar uma string?
  - Basta utilizar um deslocamento negativo!

#+begin_src haskell :tangle yes :exports code :results output
decrypt :: Int -> String -> String
decrypt n = encrypt (- n)
#+end_src

* Serialização

** Serialização

- Conversão de valores em sequências de bits.
- Como representar isso em Haskell?

** Serialização

- Convertendo bits em números

#+begin_src haskell :tangle yes :exports code :results output
type Bit = Int

bin2Int :: [Bit] -> Int
bin2Int bs = sum [w * b | (w,b) <- zip weights bs]
        where
          weights = iterate (* 2) 1
#+end_src

** Serialização

- Convertendo números em bits

#+begin_src haskell :tangle yes :exports code :results output
int2Bin :: Int -> [Bit]
int2Bin 0 = []
int2Bin n = n `mod` 2 : int2Bin (n `div` 2)
#+end_src

** Serialização

- Gerando bytes

#+begin_src haskell :tangle yes :exports code :results output
make8 :: [Bit] -> [Bit]
make8 bs = take 8 (bs ++ repeat 0)
#+end_src

** Serialização

- Dividindo em listas de bytes

#+begin_src haskell :tangle yes :exports code :results output
chop8 :: [Bit] -> [[Bit]]
chop8 [] = []
chop8 bs = take 8 bs : chop8 (drop 8 bs)
#+end_src

** Serialização

- Serialização de um string

#+begin_src haskell :tangle yes :exports code :results output
encode :: String -> [Bit]
encode = concat . map (make8 . int2Bin . ord)
#+end_src

** Serialização

- Convertendo bits para string

#+begin_src haskell :tangle yes :exports code :results output
decode :: [Bit] -> String
decode = map (chr . bin2Int) . chop8
#+end_src

* Exercícios

** Exercícios

- Um inconveniente da solução de serialização é a utilização
do tipo `Bit` como um sinônimo. Idealmente, deveríamos utilizar
um novo tipo, como se segue.

#+begin_src haskell
data Bit = O | I deriving Show
#+end_src

Modifique a implementação da serialização para utilizar essa
versão do tipo `Bit`.
